#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_x86_64

on: 
  #release:
  #  types: [published]
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #push:
  #  branches: 
  #    - master

  #schedule:
  #  - cron: 0 8 * * 5

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  CDN: carbonjiao/cdn
  REPO_VERSION: 20.4.8

  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex node-uglify git gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
        
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a

    #- name: Import external feeds - passwall
    #  working-directory: ./openwrt
    #  run: |
    #    git clone https://github.com/xiaorouji/openwrt-passwall.git package/lienol
    #    git clone "your_github_link" package/"your_folder_name"      

    #- name: Import external feeds - JerryKuKu Argon
    #  working-directory: ./openwrt
    #  run: |
    #    git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon-jerrykuku

    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: SSH 连接到编译进程Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          
    #- name: Build firmware
    #  working-directory: ./openwrt
    #  run: |
    #    echo -e "$(nproc) thread build."
    #    make -j$(nproc) V=s

    #- name : Upload artifact
    #  uses: actions/upload-artifact@master
    #  with:
    #    name: OpenWrt
    #    path: openwrt/bin

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || bash -c 'set -o pipefail ; make -j1 V=s 2>&1 | tee /tmp/openwrt-build.log'
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        if [ -s DEVICE_NAME ]; then
          echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "DEVICE_NAME=_${FALLBACK_DEVICE_NAME}" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 显示失败日志最后200行
      if: failure()
      run: tail -n 200 /tmp/openwrt-build.log
        
    - name: 显示配置文件 
      if: failure()
      run: cat openwrt/.config

    - name: 上传二进制目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理组织文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
         cd openwrt/bin/targets/*/*
         mv packages ../../../../tmp/
         echo "FIRMWARE=$PWD" >> $GITHUB_ENV
         echo "TARGET_DIR=$(echo $PWD | sed 's#^.*/openwrt/bin/##')" >> $GITHUB_ENV
         echo "::set-output name=status::success"
          
    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到奶牛快传cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: 上传固件到WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
  
    - name: 获取OpenWRT仓库位置CDN
      uses: actions/checkout@v2
      if: steps.organize.outputs.status == 'success' && env.CDN != '' && !cancelled()
      with:
        token: ${{ secrets.CDN_TOKEN }}
        repository: ${{ env.CDN }}
        fetch-depth: 2
        path: cdn

    - name: 上传到CDN
      if: steps.organize.outputs.status == 'success' && env.CDN != '' && !cancelled()
      run: |
          git config --global user.name "Actions"
          git config --global user.email "actions@github.com"
          mv ${FIRMWARE}/sha256sums ${FIRMWARE}/sha256sums.new
          sed -i '/ *config.seed$/d' ${FIRMWARE}/sha256sums.new
          mv ${FIRMWARE}/config.seed ${FIRMWARE}/$CONFIG_FILE
          
          for first in true false; do
            [ -f cdn/.reset ] && git -C cdn reset HEAD^
            mkdir -p cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}
            cat ${FIRMWARE}/sha256sums.new >> cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}/sha256sums
            tar -cC ${FIRMWARE} . | tar -xC cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}
            rm -f cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}/sha256sums.new
            [ "$FALLBACK_DEVICE_NAME" == "$TARGET_WITH_MODULES" ] && cp -a openwrt/bin/packages cdn/openwrt/release/${REPO_VERSION}/
            [ "$FALLBACK_DEVICE_NAME" == "$TARGET_WITH_MODULES" ] && cp -a openwrt/tmp/packages cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}/
            git -C cdn add --all
            git -C cdn commit -m 'release'
            if git -C cdn push `[ -f cdn/.reset ] && echo -f`; then
              break
            elif $first; then
              git -C cdn reset --hard HEAD^ && git -C cdn pull
            else
              exit -1
            fi
          done
